{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "import numpy as np\n",
    "import math\n",
    "from scipy import stats\n",
    "from scipy.optimize import root, minimize\n",
    "from scipy.special import gammaincc, erf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 9.56248705 23.54683451]\n"
     ]
    }
   ],
   "source": [
    "def ab(variables):\n",
    "    alpha, beta = variables[0], variables[1]\n",
    "    invga = stats.invgamma(a=alpha, scale=beta)\n",
    "    return (invga.mean() - invga.std() - 1.75)**2 + (invga.mean() + invga.std() - 3.75)**2\n",
    "\n",
    "x_i = np.array([3,3])\n",
    "result = minimize(ab, x_i)\n",
    "print(result.x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 2.29999859 10.8750838 ]\n"
     ]
    }
   ],
   "source": [
    "true_invgamma = stats.invgamma(a=9.56, scale=23.54)\n",
    "mean_sigma2 = true_invgamma.mean()\n",
    "\n",
    "def munu(variables):\n",
    "    mu, nu = variables[0], variables[1]\n",
    "    return ((0.5*(1+erf((1.8-mu)/(math.sqrt(2)*math.sqrt(mean_sigma2/nu))))) - 0.16)**2 + ((0.5*(1+erf((2.8-mu)/(math.sqrt(2)*math.sqrt(mean_sigma2/nu))))) - 0.84)**2\n",
    "\n",
    "x_i = np.array([1,1])\n",
    "result = minimize(munu, x_i)\n",
    "print(result.x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68% confidence interval for mean: (1.820122165350052, 2.780318943961025)\n"
     ]
    }
   ],
   "source": [
    "samples = norminvgamma_rvs(mu=2.3, nu=10.97, alpha=7.13, beta=17.02, size=1000000)\n",
    "print(\"68% confidence interval for mean:\", (np.percentile(samples[:,0], 16), np.percentile(samples[:,0], 84)))\n",
    "# print(\"68% confidence interval for variance:\", (np.percentile(samples[:,1], 16), np.percentile(samples[:,1], 84)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "########################################################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def norminvgamma_pdf(x, sigma2, mu, nu, alpha, beta):\n",
    "    '''\n",
    "    The probability density function of the normal-inverse-gamma distribution at\n",
    "    x (mean) and sigma2 (variance).\n",
    "    '''\n",
    "    return (\n",
    "        stats.norm.pdf(x, loc=mu, scale=np.sqrt(sigma2 / nu)) *\n",
    "        stats.invgamma.pdf(sigma2, a=alpha, scale=beta))\n",
    "\n",
    "def norminvgamma_rvs(mu, nu, alpha, beta, size=1):\n",
    "    '''\n",
    "    Generate n samples from the normal-inverse-gamma distribution. This function\n",
    "    returns a (size x 2) matrix where each row contains a sample, (x, sigma2).\n",
    "    '''\n",
    "    sigma2 = stats.invgamma.rvs(a=alpha, scale=beta, size=size)  # Sample sigma^2 from the inverse-gamma\n",
    "    x = stats.norm.rvs(loc=mu, scale=np.sqrt(sigma2 / nu), size=size)  # Sample x from the normal\n",
    "    return np.vstack((x, sigma2)).transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    fjac: array([[-0.82442098, -0.56597708],\n",
      "       [ 0.56597708, -0.82442098]])\n",
      "     fun: array([ 7.03284375e-10, -9.99008098e-10])\n",
      " message: 'The solution converged.'\n",
      "    nfev: 19\n",
      "     qtf: array([-1.55164491e-08, -1.43227205e-07])\n",
      "       r: array([-0.12956823,  0.05366345, -0.01045024])\n",
      "  status: 1\n",
      " success: True\n",
      "       x: array([ 7.13715467, 17.0256563 ])\n"
     ]
    }
   ],
   "source": [
    "from scipy.optimize import root\n",
    "\n",
    "def findab(v): \n",
    "    alpha, beta = v\n",
    "    return (stats.invgamma.cdf(2.75-1,a=alpha,scale=beta) - 0.16, stats.invgamma.cdf(2.75+1,a=alpha,scale=beta) - 0.84)\n",
    "\n",
    "x = root(findab, (1,1), tol=0.0001)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    fjac: array([[-1.]])\n",
      "     fun: array([1.31437808e-08])\n",
      " message: 'The solution converged.'\n",
      "    nfev: 7\n",
      "     qtf: array([-1.08783476e-05])\n",
      "       r: array([0.04391587])\n",
      "  status: 1\n",
      " success: True\n",
      "       x: array([5.51648757])\n",
      "10.946037228420431\n"
     ]
    }
   ],
   "source": [
    "true_invgamma = stats.invgamma(a=7.14, scale=17.03)\n",
    "mean_sigma2 = true_invgamma.mean()\n",
    "def findmunu(v): \n",
    "    nu = v\n",
    "    sigma2 = mean_sigma2\n",
    "    return (stats.norm.cdf(1.8,loc=2.3, scale=sigma2/nu) - 0.16)\n",
    "\n",
    "y = root(findmunu, 0.1, tol=0.0001)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68% confidence interval for mean: (1.818721924399644, 2.782514614861854)\n",
      "68% confidence interval for variance: (1.7479978559766183, 3.7506615543345445)\n"
     ]
    }
   ],
   "source": [
    "samples_2 = norminvgamma_rvs(mu=2.3, nu=(5.51)**2/mean_sigma2, alpha=7.14, beta=17.03, size=1000000)\n",
    "print(\"68% confidence interval for mean:\", (np.percentile(samples_2[:,0], 16), np.percentile(samples_2[:,0], 84)))\n",
    "print(\"68% confidence interval for variance:\", (np.percentile(samples_2[:,1], 16), np.percentile(samples_2[:,1], 84)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
